using ConsoleLogger;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VRC;
using VRC.SDK3.Components;
using VRC.SDKBase;
using xButtonAPI.Controls;
using xButtonAPI.Controls.Grouping;

namespace EXO.Modules
{
    internal class WorldExploits : BaseModule
    {
        private static bool ItemHid;
        public static void RunFirst()
        {
            var WorldEXP = new CollapsibleButtonGroup(MainModule.WorldEX, "<color=#9b0000>World Exploits</color>");

            new SingleButton(WorldEXP, "Bring All Items", "Brings All The World Items To You", () =>
            {
                {
                    CLog.L("Getting All The Items");
                    foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                        vrc_Pickup.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                }
            });
            new SingleButton(WorldEXP, "Reset All Items", "Reset All Items Back To There Spawn Point", () =>
            {
                foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                    vrc_Pickup.transform.localPosition = new Vector3(0f, -100000f, 0f);
                }
            });
            new ToggleButton(WorldEXP, "Hide Items", "Hides All Itmes", "Shows All Items", (Value) =>
            {
                if (Value)
                {
                    VRC.SDKBase.VRC_Pickup[] array = Resources.FindObjectsOfTypeAll<VRC.SDKBase.VRC_Pickup>().ToArray<VRC.SDKBase.VRC_Pickup>();
                    for (int i = 0; i < array.Length; i++)
                    {
                        bool flag = array[i].gameObject.layer == 13;
                        if (flag)
                        {
                            array[i].gameObject.SetActive(ItemHid);
                        }
                    }
                    VRC.SDKBase.VRC_Pickup[] array2 = Resources.FindObjectsOfTypeAll<VRC.SDKBase.VRC_Pickup>().ToArray<VRC.SDKBase.VRC_Pickup>();
                    for (int j = 0; j < array2.Length; j++)
                    {
                        bool flag2 = array2[j].gameObject.layer == 13;
                        if (flag2)
                        {
                            array2[j].gameObject.SetActive(ItemHid);
                        }
                    }
                    VRCPickup[] array3 = Resources.FindObjectsOfTypeAll<VRCPickup>().ToArray<VRCPickup>();
                    for (int k = 0; k < array3.Length; k++)
                    {
                        bool flag3 = array3[k].gameObject.layer == 13;
                        if (flag3)
                        {
                            array3[k].gameObject.SetActive(ItemHid);
                        }
                    }
                }
            });
            
            new SingleButton(WorldEXP, "Drop All Items", "Force Drops All Items", () =>
            {
                foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                    vrc_Pickup.Drop();
                }
                foreach (VRCPickup vrcPickup in UnityEngine.Object.FindObjectsOfType<VRCPickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrcPickup.gameObject);
                    vrcPickup.Drop();
                }
                foreach (VRCSDK2.VRC_Pickup SDK2vrcPickup in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(SDK2vrcPickup.gameObject);
                    SDK2vrcPickup.Drop();
                }
            });
        }
        internal class UserUtils
        {
            internal static GameObject GetLocalPlayer()
            {
                foreach (GameObject gameObject in UserUtils.GetAllGameObjects())
                {
                    bool flag = gameObject.name.StartsWith("VRCPlayer[Local]");
                    if (flag)
                    {
                        return gameObject;
                    }
                }
                return new GameObject();
            }
            public static VRCPlayer CurrentUser
            {
                get
                {
                    return VRCPlayer.field_Internal_Static_VRCPlayer_0;
                }
                set
                {
                    CurrentUser = CurrentUser;
                }
            }

            internal static Player LocalDownload()
            {
                foreach (GameObject gameObject in UserUtils.GetAllGameObjects())
                {
                    bool flag = gameObject.name.StartsWith("VRCPlayer[Local]");
                    if (flag)
                    {
                        return gameObject.GetComponent<VRCPlayer>().prop_Player_0;

                    }
                }
                return new Player();
            }

            internal static Player GetPlayerTest()
            {
                foreach (GameObject gameObject in UserUtils.GetAllGameObjects())
                {
                    bool flag = !GameObject.Find("UserInterface/Canvas_QuickMenu(Clone)/Container/Window/QMParent/Menu_SelectedUser_Local").active;
                    if (flag)
                    {
                        return gameObject.GetComponent<VRCPlayer>().prop_Player_0;
                    }
                }
                return new Player();
            }

            internal static GameObject[] GetAllGameObjects()
            {
                return SceneManager.GetActiveScene().GetRootGameObjects();
            }
        }
    }
}
