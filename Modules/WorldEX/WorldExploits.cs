using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VRC;
using VRC.SDK3.Components;
using VRC.SDKBase;
using xButtonAPI.Controls;
using xButtonAPI.Controls.Grouping;
using static EXO.Modules.Util;

namespace EXO.Modules
{
    internal class WorldExploits : BaseModule
    {
        private static bool ItemHid;
        internal static bool Reflect;
        public static void RunFirst()
        {
            var WorldEXP = new CollapsibleButtonGroup(MainModule.WorldEX, "<color=#9b0000>World Exploits</color>");

            new SingleButton(WorldEXP, "Bring All Items", "Brings All The World Items To You", () =>
            {                
                {
                    CLog.L("Getting All The Items");
                    foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                        vrc_Pickup.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                    foreach (VRCSDK2.VRC_Pickup vrc_Pickup2 in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_Pickup2.gameObject);
                        vrc_Pickup2.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                    foreach (VRC.SDK3.Components.VRCPickup vrc_Pickup3 in UnityEngine.Object.FindObjectsOfType<VRC.SDK3.Components.VRCPickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_Pickup3.gameObject);
                        vrc_Pickup3.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                    foreach (VRCSDK2.VRC_ObjectSync vrc_PickupSDK in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_ObjectSync>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_PickupSDK.gameObject);
                        vrc_PickupSDK.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                }
            });
            new SingleButton(WorldEXP, "Reset All Items", "Reset All Items Back To There Spawn Point", () =>
            {
                foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                    vrc_Pickup.transform.localPosition = new Vector3(0f, -100000f, 0f);
                }
                foreach (VRCSDK2.VRC_Pickup vrc_Pickup2 in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup2.gameObject);
                    vrc_Pickup2.transform.localPosition = new Vector3(0f, -100000f, 0f);
                }
                foreach (VRC.SDK3.Components.VRCPickup vrc_Pickup3 in UnityEngine.Object.FindObjectsOfType<VRCPickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup3.gameObject);
                    vrc_Pickup3.transform.localPosition = new Vector3(0f, -100000f, 0f);
                }
                foreach (VRCSDK2.VRC_ObjectSync vrc_PickupSDK in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_ObjectSync>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_PickupSDK.gameObject);
                    vrc_PickupSDK.transform.localPosition = new Vector3(0f, -100000f, 0f);
                    UserUtils.GetLocalPlayer().transform.position = new Vector3(0f, 100000f, 0f);
                }
            });
            //Needs fix
            new SingleButton(WorldEXP, "Hide Items", "Hides All Itmes", () =>
            {
                VRC.SDKBase.VRC_Pickup[] array = Resources.FindObjectsOfTypeAll<VRC.SDKBase.VRC_Pickup>().ToArray<VRC.SDKBase.VRC_Pickup>();
                for (int i = 0; i < array.Length; i++)
                {
                    bool flag = array[i].gameObject.layer == 13;
                    if (flag)
                    {
                        array[i].gameObject.SetActive(ItemHid);
                    }
                }
                VRCSDK2.VRC_Pickup[] array2 = Resources.FindObjectsOfTypeAll<VRCSDK2.VRC_Pickup>().ToArray<VRCSDK2.VRC_Pickup>();
                for (int j = 0; j < array2.Length; j++)
                {
                    bool flag2 = array2[j].gameObject.layer == 13;
                    if (flag2)
                    {
                        array2[j].gameObject.SetActive(ItemHid);
                    }
                }
                VRC.SDK3.Components.VRCPickup[] array3 = Resources.FindObjectsOfTypeAll<VRC.SDK3.Components.VRCPickup>().ToArray<VRC.SDK3.Components.VRCPickup>();
                for (int k = 0; k < array3.Length; k++)
                {
                    bool flag3 = array3[k].gameObject.layer == 13;
                    if (flag3)
                    {
                        array3[k].gameObject.SetActive(ItemHid);
                    }
                }
                VRCSDK2.VRC_ObjectSync[] array4 = Resources.FindObjectsOfTypeAll<VRCSDK2.VRC_ObjectSync>().ToArray<VRCSDK2.VRC_ObjectSync>();
                for (int k = 0; k < array3.Length; k++)
                {
                    bool flag4 = array3[k].gameObject.layer == 13;
                    if (flag4)
                    {
                        array4[k].gameObject.SetActive(ItemHid);
                    }
                }
            });            
            new SingleButton(WorldEXP, "Drop All Items", "Force Drops All Items", () =>
            {
                foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                    vrc_Pickup.Drop();
                }
                foreach (VRC.SDK3.Components.VRCPickup vrcPickup in UnityEngine.Object.FindObjectsOfType<VRC.SDK3.Components.VRCPickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrcPickup.gameObject);
                    vrcPickup.Drop();
                }
                foreach (VRCSDK2.VRC_Pickup SDK2vrcPickup in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(SDK2vrcPickup.gameObject);
                    SDK2vrcPickup.Drop();
                }                  
            });
            
            //new ToggleButton(WorldEXP, "Reflection", "Reflect All Incoming Udon Events", "Stop Reflecting Udon Events", (value) =>
            //{
            //    Reflect = value;
            //});
        }        
    }
}
