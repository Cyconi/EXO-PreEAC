using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.SceneManagement;
using VRC;
using VRC.SDK3.Components;
using VRC.SDKBase;
using xButtonAPI.Controls;
using xButtonAPI.Controls.Grouping;
using static EXO.Modules.Util;

namespace EXO.Modules
{
    internal class WorldExploits : BaseModule
    {        
        public static void RunFirst()
        {
            var WorldEXP = new CollapsibleButtonGroup(MainModule.WorldEX, "<color=#9b0000>World Exploits</color>");

            new SingleButton(WorldEXP, "Bring All Items", "Brings All The World Items To You", () =>
            {                
                {
                    CLog.L("Getting All The Items");
                    foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                        vrc_Pickup.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                    foreach (VRCSDK2.VRC_Pickup vrc_Pickup2 in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_Pickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_Pickup2.gameObject);
                        vrc_Pickup2.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                    foreach (VRC.SDK3.Components.VRCPickup vrc_Pickup3 in UnityEngine.Object.FindObjectsOfType<VRC.SDK3.Components.VRCPickup>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_Pickup3.gameObject);
                        vrc_Pickup3.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                    foreach (VRCSDK2.VRC_ObjectSync vrc_PickupSDK in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_ObjectSync>())
                    {
                        Networking.LocalPlayer.TakeOwnership(vrc_PickupSDK.gameObject);
                        vrc_PickupSDK.transform.position = UserUtils.GetLocalPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
                    }
                }
            });
            new SingleButton(WorldEXP, "Reset All Items", "Reset All Items Back To There Spawn Point", () =>
            {
                foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                    vrc_Pickup.transform.localPosition = new Vector3(0f, -100000f, 0f);
                }
                foreach (VRCSDK2.VRC_Pickup vrc_Pickup2 in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup2.gameObject);
                    vrc_Pickup2.transform.localPosition = new Vector3(0f, -100000f, 0f);
                }
                foreach (VRC.SDK3.Components.VRCPickup vrc_Pickup3 in UnityEngine.Object.FindObjectsOfType<VRCPickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup3.gameObject);
                    vrc_Pickup3.transform.localPosition = new Vector3(0f, -100000f, 0f);
                }
                foreach (VRCSDK2.VRC_ObjectSync vrc_PickupSDK in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_ObjectSync>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_PickupSDK.gameObject);
                    vrc_PickupSDK.transform.localPosition = new Vector3(0f, -100000f, 0f);
                    UserUtils.GetLocalPlayer().transform.position = new Vector3(0f, 100000f, 0f);
                }
            });
            //Needs fix
            new ToggleButton(WorldEXP, "Hide Items", "Hides Items", "Shows Items", (value) =>
            {
                ItemHide(value);
            });
            new SingleButton(WorldEXP, "Drop All Items", "Force Drops All Items", () =>
            {
                foreach (VRC_Pickup vrc_Pickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
                    vrc_Pickup.Drop();
                }
                foreach (VRC.SDK3.Components.VRCPickup vrcPickup in UnityEngine.Object.FindObjectsOfType<VRC.SDK3.Components.VRCPickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(vrcPickup.gameObject);
                    vrcPickup.Drop();
                }
                foreach (VRCSDK2.VRC_Pickup SDK2vrcPickup in UnityEngine.Object.FindObjectsOfType<VRCSDK2.VRC_Pickup>())
                {
                    Networking.LocalPlayer.TakeOwnership(SDK2vrcPickup.gameObject);
                    SDK2vrcPickup.Drop();
                }                  
            });
            
            new ToggleButton(WorldEXP, "Reflection", "Reflect All Incoming Udon Events", "Stop Reflecting Udon Events", (value) =>
            {
                
            });
        }
        internal static void ItemHide(bool Hide)
        {
            VRC_Pickup[] D = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray<VRC_Pickup>();
            for (int i = 0; i < D.Length; i++)
            {
                bool L = D[i].gameObject.layer == 13;
                if (L)
                {
                    D[i].gameObject.SetActive(Hide);
                }
            }
            VRC_Pickup[] Y = Resources.FindObjectsOfTypeAll<VRCSDK2.VRC_Pickup>().ToArray<VRCSDK2.VRC_Pickup>();
            for (int j = 0; j < Y.Length; j++)
            {
                bool E = Y[j].gameObject.layer == 13;
                if (E)
                {
                    Y[j].gameObject.SetActive(Hide);
                }
            }
            VRCPickup[] C = Resources.FindObjectsOfTypeAll<VRCPickup>().ToArray<VRCPickup>();
            for (int k = 0; k < C.Length; k++)
            {
                bool G = C[k].gameObject.layer == 13;
                if (G)
                {
                    C[k].gameObject.SetActive(Hide);
                }
            }
        }
    }
}
